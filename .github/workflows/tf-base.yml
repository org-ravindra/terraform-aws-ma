name: terraform
on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string         # "plan" | "apply"
      tf_workdir:
        required: false
        type: string
        default: envs/dev
    secrets:
      AWS_ROLE_ARN:
        required: true
      MA_GITHUB_TOKEN:        
        required: true
      MA_ADMIN_TOKEN:         
        required: true

jobs:
  tf:
    name: Terraform ${{ inputs.mode }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::313636271558:role/ma-tf-gha-role
          role-session-name: gha-terraform
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Verify identity
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ inputs.tf_workdir }}

      - name: Terraform Fmt (write changes)
        run: terraform fmt -recursive
        working-directory: ${{ inputs.tf_workdir }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ inputs.tf_workdir }}

      - name: Check secret presence (safe)
        run: |
          echo "github_token length: ${#TF_VAR_github_token}"
          echo "ma_admin_token length: ${#TF_VAR_ma_admin_token}"
          
      - name: Terraform Plan
        if: ${{ inputs.mode == 'plan' }}
        run: terraform plan -input=false -no-color
        working-directory: ${{ inputs.tf_workdir }}

      - name: Terraform Apply
        if: ${{ inputs.mode == 'apply' }}
        run: terraform apply -input=false -auto-approve -no-color
        working-directory: ${{ inputs.tf_workdir }}

      - name: Terraform Destroy
        if: ${{ inputs.mode == 'destroy' }}
        run: terraform destroy -auto-approve
        working-directory: ${{ inputs.tf_workdir }}